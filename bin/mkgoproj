#!/bin/bash
set -e
set -u
set -o pipefail

PROJECT_NAME="${1:-}"
FORK="${2:-}"
PKG="${3:-}"
GO_VERSION="${4:-}"

function usage_and_exit {
  echo "usage:  mkgoproj <name> <fork> <pkg> <go version>"
  exit 1
}

[[ -z "$PROJECT_NAME" ]] && usage_and_exit
[[ -z "$GO_VERSION" ]] && usage_and_exit
[[ -z "$FORK" ]] && usage_and_exit
[[ -z "$PKG" ]] && usage_and_exit

GO_DIR=$HOME/.go/$GO_VERSION
TEMPLATE_DIR="$HOME/dotfiles/projects/$PROJECT_NAME"
PROJECT_DIR=$HOME/Projects/$PROJECT_NAME
CLONE_DIR="$PROJECT_DIR/src/${PKG}"

if [ ! -d $GO_DIR ]; then
  echo "Go directory not found at $GO_DIR"
  exit 1
fi

if [ ! -d $TEMPLATE_DIR ]; then
  mkdir -p $TEMPLATE_DIR
  echo "created $TEMPLATE_DIR"
fi

if [ ! -d $PROJECT_DIR ]; then
  mkdir -p $PROJECT_DIR
  echo "created $PROJECT_DIR"
fi

if [ ! -f $TEMPLATE_DIR/envrc ]; then
cat << EOF > $TEMPLATE_DIR/envrc
source \$HOME/dotfiles/projects/utils.sh

dotfiles::direnv::setup_gopath "1.10.3"
EOF
echo "created $TEMPLATE_DIR/envrc"
fi

ln -sf $TEMPLATE_DIR/envrc $PROJECT_DIR/.envrc
pushd $PROJECT_DIR >/dev/null
direnv allow
popd >/dev/null

if [ ! -f $CLONE_DIR ]; then
  git clone "git@github.com:ironcladlou/${PROJECT_NAME}.git" "${CLONE_DIR}"
  pushd "${CLONE_DIR}" >/dev/null
  git remote add upstream "git@github.com:${FORK}/${PROJECT_NAME}.git"
  git fetch upstream
  popd >/dev/null
fi

if [ ! -d "$TEMPLATE_DIR/vscode" ]; then
mkdir "$TEMPLATE_DIR/vscode"
cat << EOF > $TEMPLATE_DIR/vscode/settings.json
{
  "files.exclude": {
  },
  "go.testTimeout": "5s",
  "go.goroot": "$GO_DIR",
  "go.toolsGopath": "$HOME/.go/.vscode-tools/$GO_VERSION",
  "go.gopath": "$PROJECT_DIR",
  "go.alternateTools": {
    "go": "$GO_DIR/bin/go"
  },
  "go.testFlags": ["-v"],
  "git.ignoreLimitWarning": true
}
EOF

cat << EOF > $TEMPLATE_DIR/vscode/tasks.json
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "\${GOROOT}/bin/go build . ; \${GOROOT}/bin/go test -run ^$ ./...",
            "options": {
                "env": {
                    "GOROOT": "$GO_DIR",
                    "GOPATH": "$PROJECT_DIR"
                }
            },
            "group": {
                "kind": "build",
                "isDefault": true,
            },
            "problemMatcher": [
                "\$go"
            ],
            "presentation": {
                "reveal": "never",
                "panel": "new"
            }
        }
    ]
}
EOF
fi

ln -sf "$TEMPLATE_DIR/vscode" "$CLONE_DIR/.vscode"

echo "created project at $PROJECT_DIR"
